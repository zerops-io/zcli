// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: zeropsVpnProtocol.proto

package zeropsVpnProtocol

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ErrorCode int32

const (
	ErrorCode_NO_ERROR               ErrorCode = 0
	ErrorCode_INTERNAL_SERVER_ERROR  ErrorCode = 1
	ErrorCode_INSTANCE_NOT_FOUND     ErrorCode = 2
	ErrorCode_PROXY_IS_FULL          ErrorCode = 3
	ErrorCode_INVALID_SIGNATURE      ErrorCode = 4
	ErrorCode_EXPIRED_SIGNATURE      ErrorCode = 5
	ErrorCode_MAX_PARALLEL_VPN_LIMIT ErrorCode = 6
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "NO_ERROR",
		1: "INTERNAL_SERVER_ERROR",
		2: "INSTANCE_NOT_FOUND",
		3: "PROXY_IS_FULL",
		4: "INVALID_SIGNATURE",
		5: "EXPIRED_SIGNATURE",
		6: "MAX_PARALLEL_VPN_LIMIT",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":               0,
		"INTERNAL_SERVER_ERROR":  1,
		"INSTANCE_NOT_FOUND":     2,
		"PROXY_IS_FULL":          3,
		"INVALID_SIGNATURE":      4,
		"EXPIRED_SIGNATURE":      5,
		"MAX_PARALLEL_VPN_LIMIT": 6,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_zeropsVpnProtocol_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_zeropsVpnProtocol_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=zeropsVpnProtocol.ErrorCode" json:"code,omitempty"`
	Message string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_NO_ERROR
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type IP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *IP) Reset() {
	*x = IP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IP) ProtoMessage() {}

func (x *IP) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IP.ProtoReflect.Descriptor instead.
func (*IP) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *IP) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

type IPRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   []byte `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *IPRange) Reset() {
	*x = IPRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRange) ProtoMessage() {}

func (x *IPRange) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRange.ProtoReflect.Descriptor instead.
func (*IPRange) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *IPRange) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPRange) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSet   bool  `protobuf:"varint,1,opt,name=isSet,proto3" json:"isSet,omitempty"`
	Seconds int64 `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanos   int32 `protobuf:"varint,3,opt,name=nanos,proto3" json:"nanos,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *Timestamp) GetIsSet() bool {
	if x != nil {
		return x.IsSet
	}
	return false
}

func (x *Timestamp) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timestamp) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

type StartVpnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId      string     `protobuf:"bytes,1,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	UserId          string     `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	ClientPublicKey string     `protobuf:"bytes,3,opt,name=clientPublicKey,proto3" json:"clientPublicKey,omitempty"`
	Signature       string     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	Expiry          *Timestamp `protobuf:"bytes,5,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *StartVpnRequest) Reset() {
	*x = StartVpnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVpnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVpnRequest) ProtoMessage() {}

func (x *StartVpnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVpnRequest.ProtoReflect.Descriptor instead.
func (*StartVpnRequest) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *StartVpnRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *StartVpnRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *StartVpnRequest) GetClientPublicKey() string {
	if x != nil {
		return x.ClientPublicKey
	}
	return ""
}

func (x *StartVpnRequest) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *StartVpnRequest) GetExpiry() *Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type StartVpnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *Error          `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Vpn   *StartVpnOutDto `protobuf:"bytes,2,opt,name=vpn,proto3" json:"vpn,omitempty"`
}

func (x *StartVpnResponse) Reset() {
	*x = StartVpnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVpnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVpnResponse) ProtoMessage() {}

func (x *StartVpnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVpnResponse.ProtoReflect.Descriptor instead.
func (*StartVpnResponse) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *StartVpnResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *StartVpnResponse) GetVpn() *StartVpnOutDto {
	if x != nil {
		return x.Vpn
	}
	return nil
}

type StartVpnOutDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port             int64    `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	ServerPublicKey  string   `protobuf:"bytes,2,opt,name=serverPublicKey,proto3" json:"serverPublicKey,omitempty"`
	AssignedClientIp *IP      `protobuf:"bytes,3,opt,name=assignedClientIp,proto3" json:"assignedClientIp,omitempty"`
	ServerIp         *IP      `protobuf:"bytes,4,opt,name=serverIp,proto3" json:"serverIp,omitempty"`
	VpnIpRange       *IPRange `protobuf:"bytes,5,opt,name=vpnIpRange,proto3" json:"vpnIpRange,omitempty"`
	DnsIp            *IP      `protobuf:"bytes,6,opt,name=dnsIp,proto3" json:"dnsIp,omitempty"`
}

func (x *StartVpnOutDto) Reset() {
	*x = StartVpnOutDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zeropsVpnProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVpnOutDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVpnOutDto) ProtoMessage() {}

func (x *StartVpnOutDto) ProtoReflect() protoreflect.Message {
	mi := &file_zeropsVpnProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVpnOutDto.ProtoReflect.Descriptor instead.
func (*StartVpnOutDto) Descriptor() ([]byte, []int) {
	return file_zeropsVpnProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *StartVpnOutDto) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartVpnOutDto) GetServerPublicKey() string {
	if x != nil {
		return x.ServerPublicKey
	}
	return ""
}

func (x *StartVpnOutDto) GetAssignedClientIp() *IP {
	if x != nil {
		return x.AssignedClientIp
	}
	return nil
}

func (x *StartVpnOutDto) GetServerIp() *IP {
	if x != nil {
		return x.ServerIp
	}
	return nil
}

func (x *StartVpnOutDto) GetVpnIpRange() *IPRange {
	if x != nil {
		return x.VpnIpRange
	}
	return nil
}

func (x *StartVpnOutDto) GetDnsIp() *IP {
	if x != nil {
		return x.DnsIp
	}
	return nil
}

var File_zeropsVpnProtocol_proto protoreflect.FileDescriptor

var file_zeropsVpnProtocol_proto_rawDesc = []byte{
	0x0a, 0x17, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x53, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1e, 0x0a, 0x02, 0x49, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x2d, 0x0a, 0x07, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b,
	0x22, 0x51, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x73, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x61,
	0x6e, 0x6f, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x70, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x77, 0x0a,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x33, 0x0a, 0x03, 0x76, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x70, 0x6e, 0x4f, 0x75, 0x74, 0x44, 0x74,
	0x6f, 0x52, 0x03, 0x76, 0x70, 0x6e, 0x22, 0xad, 0x02, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x70, 0x6e, 0x4f, 0x75, 0x74, 0x44, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x50, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a,
	0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x49, 0x50, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12, 0x3a, 0x0a,
	0x0a, 0x76, 0x70, 0x6e, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x50, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x76,
	0x70, 0x6e, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x6e, 0x73,
	0x49, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x50, 0x52,
	0x05, 0x64, 0x6e, 0x73, 0x49, 0x70, 0x2a, 0xa9, 0x01, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x5f, 0x49,
	0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x56, 0x50, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x06, 0x32, 0x68, 0x0a, 0x11, 0x5a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x70, 0x6e, 0x12, 0x22, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x70, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x7a, 0x65, 0x72, 0x6f, 0x70, 0x73,
	0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x70, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x31, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x70,
	0x73, 0x2d, 0x69, 0x6f, 0x2f, 0x7a, 0x63, 0x6c, 0x69, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x7a, 0x65,
	0x72, 0x6f, 0x70, 0x73, 0x56, 0x70, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zeropsVpnProtocol_proto_rawDescOnce sync.Once
	file_zeropsVpnProtocol_proto_rawDescData = file_zeropsVpnProtocol_proto_rawDesc
)

func file_zeropsVpnProtocol_proto_rawDescGZIP() []byte {
	file_zeropsVpnProtocol_proto_rawDescOnce.Do(func() {
		file_zeropsVpnProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_zeropsVpnProtocol_proto_rawDescData)
	})
	return file_zeropsVpnProtocol_proto_rawDescData
}

var file_zeropsVpnProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zeropsVpnProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_zeropsVpnProtocol_proto_goTypes = []interface{}{
	(ErrorCode)(0),           // 0: zeropsVpnProtocol.errorCode
	(*Error)(nil),            // 1: zeropsVpnProtocol.error
	(*IP)(nil),               // 2: zeropsVpnProtocol.IP
	(*IPRange)(nil),          // 3: zeropsVpnProtocol.IPRange
	(*Timestamp)(nil),        // 4: zeropsVpnProtocol.Timestamp
	(*StartVpnRequest)(nil),  // 5: zeropsVpnProtocol.startVpnRequest
	(*StartVpnResponse)(nil), // 6: zeropsVpnProtocol.startVpnResponse
	(*StartVpnOutDto)(nil),   // 7: zeropsVpnProtocol.startVpnOutDto
}
var file_zeropsVpnProtocol_proto_depIdxs = []int32{
	0, // 0: zeropsVpnProtocol.error.code:type_name -> zeropsVpnProtocol.errorCode
	4, // 1: zeropsVpnProtocol.startVpnRequest.expiry:type_name -> zeropsVpnProtocol.Timestamp
	1, // 2: zeropsVpnProtocol.startVpnResponse.error:type_name -> zeropsVpnProtocol.error
	7, // 3: zeropsVpnProtocol.startVpnResponse.vpn:type_name -> zeropsVpnProtocol.startVpnOutDto
	2, // 4: zeropsVpnProtocol.startVpnOutDto.assignedClientIp:type_name -> zeropsVpnProtocol.IP
	2, // 5: zeropsVpnProtocol.startVpnOutDto.serverIp:type_name -> zeropsVpnProtocol.IP
	3, // 6: zeropsVpnProtocol.startVpnOutDto.vpnIpRange:type_name -> zeropsVpnProtocol.IPRange
	2, // 7: zeropsVpnProtocol.startVpnOutDto.dnsIp:type_name -> zeropsVpnProtocol.IP
	5, // 8: zeropsVpnProtocol.ZeropsVpnProtocol.startVpn:input_type -> zeropsVpnProtocol.startVpnRequest
	6, // 9: zeropsVpnProtocol.ZeropsVpnProtocol.startVpn:output_type -> zeropsVpnProtocol.startVpnResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_zeropsVpnProtocol_proto_init() }
func file_zeropsVpnProtocol_proto_init() {
	if File_zeropsVpnProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zeropsVpnProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVpnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVpnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zeropsVpnProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartVpnOutDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zeropsVpnProtocol_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zeropsVpnProtocol_proto_goTypes,
		DependencyIndexes: file_zeropsVpnProtocol_proto_depIdxs,
		EnumInfos:         file_zeropsVpnProtocol_proto_enumTypes,
		MessageInfos:      file_zeropsVpnProtocol_proto_msgTypes,
	}.Build()
	File_zeropsVpnProtocol_proto = out.File
	file_zeropsVpnProtocol_proto_rawDesc = nil
	file_zeropsVpnProtocol_proto_goTypes = nil
	file_zeropsVpnProtocol_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZeropsVpnProtocolClient is the client API for ZeropsVpnProtocol service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZeropsVpnProtocolClient interface {
	StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*StartVpnResponse, error)
}

type zeropsVpnProtocolClient struct {
	cc grpc.ClientConnInterface
}

func NewZeropsVpnProtocolClient(cc grpc.ClientConnInterface) ZeropsVpnProtocolClient {
	return &zeropsVpnProtocolClient{cc}
}

func (c *zeropsVpnProtocolClient) StartVpn(ctx context.Context, in *StartVpnRequest, opts ...grpc.CallOption) (*StartVpnResponse, error) {
	out := new(StartVpnResponse)
	err := c.cc.Invoke(ctx, "/zeropsVpnProtocol.ZeropsVpnProtocol/startVpn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeropsVpnProtocolServer is the server API for ZeropsVpnProtocol service.
type ZeropsVpnProtocolServer interface {
	StartVpn(context.Context, *StartVpnRequest) (*StartVpnResponse, error)
}

// UnimplementedZeropsVpnProtocolServer can be embedded to have forward compatible implementations.
type UnimplementedZeropsVpnProtocolServer struct {
}

func (*UnimplementedZeropsVpnProtocolServer) StartVpn(context.Context, *StartVpnRequest) (*StartVpnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVpn not implemented")
}

func RegisterZeropsVpnProtocolServer(s *grpc.Server, srv ZeropsVpnProtocolServer) {
	s.RegisterService(&_ZeropsVpnProtocol_serviceDesc, srv)
}

func _ZeropsVpnProtocol_StartVpn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVpnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeropsVpnProtocolServer).StartVpn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeropsVpnProtocol.ZeropsVpnProtocol/StartVpn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeropsVpnProtocolServer).StartVpn(ctx, req.(*StartVpnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZeropsVpnProtocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zeropsVpnProtocol.ZeropsVpnProtocol",
	HandlerType: (*ZeropsVpnProtocolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "startVpn",
			Handler:    _ZeropsVpnProtocol_StartVpn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeropsVpnProtocol.proto",
}
